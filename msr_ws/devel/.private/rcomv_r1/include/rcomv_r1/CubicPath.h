// Generated by gencpp from file rcomv_r1/CubicPath.msg
// DO NOT EDIT!


#ifndef RCOMV_R1_MESSAGE_CUBICPATH_H
#define RCOMV_R1_MESSAGE_CUBICPATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rcomv_r1
{
template <class ContainerAllocator>
struct CubicPath_
{
  typedef CubicPath_<ContainerAllocator> Type;

  CubicPath_()
    : path_type()
    , qi_x(0.0)
    , qi_y(0.0)
    , qi_theta(0.0)
    , qf_x(0.0)
    , qf_y(0.0)
    , qf_theta(0.0)
    , T(0.0)
    , poly_k(0.0)  {
    }
  CubicPath_(const ContainerAllocator& _alloc)
    : path_type(_alloc)
    , qi_x(0.0)
    , qi_y(0.0)
    , qi_theta(0.0)
    , qf_x(0.0)
    , qf_y(0.0)
    , qf_theta(0.0)
    , T(0.0)
    , poly_k(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_type_type;
  _path_type_type path_type;

   typedef double _qi_x_type;
  _qi_x_type qi_x;

   typedef double _qi_y_type;
  _qi_y_type qi_y;

   typedef double _qi_theta_type;
  _qi_theta_type qi_theta;

   typedef double _qf_x_type;
  _qf_x_type qf_x;

   typedef double _qf_y_type;
  _qf_y_type qf_y;

   typedef double _qf_theta_type;
  _qf_theta_type qf_theta;

   typedef double _T_type;
  _T_type T;

   typedef double _poly_k_type;
  _poly_k_type poly_k;





  typedef boost::shared_ptr< ::rcomv_r1::CubicPath_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rcomv_r1::CubicPath_<ContainerAllocator> const> ConstPtr;

}; // struct CubicPath_

typedef ::rcomv_r1::CubicPath_<std::allocator<void> > CubicPath;

typedef boost::shared_ptr< ::rcomv_r1::CubicPath > CubicPathPtr;
typedef boost::shared_ptr< ::rcomv_r1::CubicPath const> CubicPathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rcomv_r1::CubicPath_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rcomv_r1::CubicPath_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rcomv_r1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rcomv_r1': ['/home/dasc/Ruilin/MSR-gazebo-code/msr_ws/src/RCOMV/rcomv_r1/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rcomv_r1::CubicPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rcomv_r1::CubicPath_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcomv_r1::CubicPath_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcomv_r1::CubicPath_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcomv_r1::CubicPath_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcomv_r1::CubicPath_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rcomv_r1::CubicPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd1af34fecb10a7d71d4740943397d74";
  }

  static const char* value(const ::rcomv_r1::CubicPath_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd1af34fecb10a7dULL;
  static const uint64_t static_value2 = 0x71d4740943397d74ULL;
};

template<class ContainerAllocator>
struct DataType< ::rcomv_r1::CubicPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rcomv_r1/CubicPath";
  }

  static const char* value(const ::rcomv_r1::CubicPath_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rcomv_r1::CubicPath_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The Cubic Polynomials Path/Trajectory Data Type.\n\
# This is used for defining a trajectory using cubic polynomials equations\n\
\n\
# path type\n\
string path_type\n\
\n\
# inital location\n\
float64 qi_x\n\
float64 qi_y\n\
float64 qi_theta\n\
\n\
# final location\n\
float64 qf_x\n\
float64 qf_y\n\
float64 qf_theta\n\
\n\
# total travel time\n\
float64 T\n\
\n\
# cubic polynomial parameter\n\
float64 poly_k\n\
";
  }

  static const char* value(const ::rcomv_r1::CubicPath_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rcomv_r1::CubicPath_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_type);
      stream.next(m.qi_x);
      stream.next(m.qi_y);
      stream.next(m.qi_theta);
      stream.next(m.qf_x);
      stream.next(m.qf_y);
      stream.next(m.qf_theta);
      stream.next(m.T);
      stream.next(m.poly_k);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CubicPath_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rcomv_r1::CubicPath_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rcomv_r1::CubicPath_<ContainerAllocator>& v)
  {
    s << indent << "path_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path_type);
    s << indent << "qi_x: ";
    Printer<double>::stream(s, indent + "  ", v.qi_x);
    s << indent << "qi_y: ";
    Printer<double>::stream(s, indent + "  ", v.qi_y);
    s << indent << "qi_theta: ";
    Printer<double>::stream(s, indent + "  ", v.qi_theta);
    s << indent << "qf_x: ";
    Printer<double>::stream(s, indent + "  ", v.qf_x);
    s << indent << "qf_y: ";
    Printer<double>::stream(s, indent + "  ", v.qf_y);
    s << indent << "qf_theta: ";
    Printer<double>::stream(s, indent + "  ", v.qf_theta);
    s << indent << "T: ";
    Printer<double>::stream(s, indent + "  ", v.T);
    s << indent << "poly_k: ";
    Printer<double>::stream(s, indent + "  ", v.poly_k);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCOMV_R1_MESSAGE_CUBICPATH_H
